/**
 */
package behaviourseff.provider;

import behaviourseff.util.BehaviourseffAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BehaviourseffItemProviderAdapterFactory extends BehaviourseffAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BehaviourseffItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourseff.BehaviourSEFF} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviourSEFFItemProvider behaviourSEFFItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourseff.BehaviourSEFF}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviourSEFFAdapter() {
		if (behaviourSEFFItemProvider == null) {
			behaviourSEFFItemProvider = new BehaviourSEFFItemProvider(this);
		}

		return behaviourSEFFItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourseff.ProbabilisticBranchTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProbabilisticBranchTransitionItemProvider probabilisticBranchTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourseff.ProbabilisticBranchTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProbabilisticBranchTransitionAdapter() {
		if (probabilisticBranchTransitionItemProvider == null) {
			probabilisticBranchTransitionItemProvider = new ProbabilisticBranchTransitionItemProvider(this);
		}

		return probabilisticBranchTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourseff.GuardedBranchTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GuardedBranchTransitionItemProvider guardedBranchTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourseff.GuardedBranchTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGuardedBranchTransitionAdapter() {
		if (guardedBranchTransitionItemProvider == null) {
			guardedBranchTransitionItemProvider = new GuardedBranchTransitionItemProvider(this);
		}

		return guardedBranchTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourseff.CollectionIteratorAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectionIteratorActionItemProvider collectionIteratorActionItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourseff.CollectionIteratorAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectionIteratorActionAdapter() {
		if (collectionIteratorActionItemProvider == null) {
			collectionIteratorActionItemProvider = new CollectionIteratorActionItemProvider(this);
		}

		return collectionIteratorActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourseff.CallReturnAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallReturnActionItemProvider callReturnActionItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourseff.CallReturnAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallReturnActionAdapter() {
		if (callReturnActionItemProvider == null) {
			callReturnActionItemProvider = new CallReturnActionItemProvider(this);
		}

		return callReturnActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourseff.ExternalCallAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalCallActionItemProvider externalCallActionItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourseff.ExternalCallAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalCallActionAdapter() {
		if (externalCallActionItemProvider == null) {
			externalCallActionItemProvider = new ExternalCallActionItemProvider(this);
		}

		return externalCallActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourseff.AcquireAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcquireActionItemProvider acquireActionItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourseff.AcquireAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcquireActionAdapter() {
		if (acquireActionItemProvider == null) {
			acquireActionItemProvider = new AcquireActionItemProvider(this);
		}

		return acquireActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourseff.ReleaseAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReleaseActionItemProvider releaseActionItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourseff.ReleaseAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReleaseActionAdapter() {
		if (releaseActionItemProvider == null) {
			releaseActionItemProvider = new ReleaseActionItemProvider(this);
		}

		return releaseActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link behaviourseff.SetVariableAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetVariableActionItemProvider setVariableActionItemProvider;

	/**
	 * This creates an adapter for a {@link behaviourseff.SetVariableAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetVariableActionAdapter() {
		if (setVariableActionItemProvider == null) {
			setVariableActionItemProvider = new SetVariableActionItemProvider(this);
		}

		return setVariableActionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (behaviourSEFFItemProvider != null) behaviourSEFFItemProvider.dispose();
		if (probabilisticBranchTransitionItemProvider != null) probabilisticBranchTransitionItemProvider.dispose();
		if (guardedBranchTransitionItemProvider != null) guardedBranchTransitionItemProvider.dispose();
		if (collectionIteratorActionItemProvider != null) collectionIteratorActionItemProvider.dispose();
		if (callReturnActionItemProvider != null) callReturnActionItemProvider.dispose();
		if (externalCallActionItemProvider != null) externalCallActionItemProvider.dispose();
		if (acquireActionItemProvider != null) acquireActionItemProvider.dispose();
		if (releaseActionItemProvider != null) releaseActionItemProvider.dispose();
		if (setVariableActionItemProvider != null) setVariableActionItemProvider.dispose();
	}

}
